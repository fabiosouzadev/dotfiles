### : << eof
### https://github.com/fabiosouzadev/dotfiles
###

### INSTALLATION NOTES ####
# - SESSION
#   - New session       Prefix + Ctrl+c
#   - Rename session    Prefix + Ctrl+r
#   - Save session      Prefix + Ctrl+s
# - WINDOW
#   - New window:       Prefix + c
#   - Rename window:    Prefix + r
#   - Next window:      Prefix + n
#   - Previous window:  Prefix + p
#   - Last used window: Prefix + l
#   - Quick window:     Prefix + w
#   - Close window:     Prefix + &

# - PANES
#   - Vertical split:   Prefix + %
#   - Horizontal split: Prefix + "
#   - Close pane:
#   - Zoom pane:       Prefix + - 
#   - Reset pane:      Prefix + Ctrl-0
#   - Swap pane:       Prefix + > # swap current pane with the next one
#   - Swap pane:       Prefix + < # swap current pane with the previous one
#   - H to V:          Prefix + Space # Move Tmux Pane from Vertical to Horizontal
#   - Move to left:    Prefix + {
#   - Move to right:   Prefix +

# ==========================
# ===  General settings  ===
# ==========================
set -g status-position top
set -ga terminal-overrides ",*256col*:Tc:RGB"
set -sg escape-time 0
set -sg repeat-time 600

# nvim compatibility - fix the cursor problem
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# ==========================
# ===   Key bindings     ===
# ==========================

# Session
bind C-c new-session
bind C-r command-prompt -I "#{session_name}" "rename-session '%%'"
# bind C-f command-prompt -p find-session 'switch-client -t %%'

# Window
bind c new-window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
# bind -r p previous-window   # select previous window
bind -r n next-window       # select next window
bind -r l last-window       # move to last active window
bind Tab last-window        # move to last active window
bind -r C-h select-window -t :-   # Jump to window on the left
bind -r C-l select-window -t :+   # Jump to window on the right

# Panes
# bind v split-window -h -c "#{pane_current_path}"
# bind x split-window -v -c "#{pane_current_path}"
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# pane resizing
bind + resize-pane -Z       # Zoom pane
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================

bind Enter copy-mode # enter copy mode
bind P paste-buffer
run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Wayland clipboard
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | wl-copy"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'



# ==============================================
# ===                 Popup                  ===
# ==============================================
# Display lazygit
bind -r g display-popup -d '#{pane_current_path}' -w80% -h80% -E lazygit
bind -r o display-popup -d '#{pane_current_path}' -w80% -h80% -E lazydocker
bind -r k display-popup -d '#{pane_current_path}' -w80% -h80% -E k9s
bind -r z display-popup -d '#{pane_current_path}' -w80% -h80% -E yazi

# ==============================================
# ===                 Yazi                  ===
# ==============================================
set -g allow-passthrough on

set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM
